install.packages("ggplot2")
install.packages("dplyr")
install.packages("sqldf")
if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
if (! ("methods" %in% rownames(installed.packages()))) { install.packages("methods") }
if (! ("statmod" %in% rownames(installed.packages()))) { install.packages("statmod") }
if (! ("stats" %in% rownames(installed.packages()))) { install.packages("stats") }
if (! ("graphics" %in% rownames(installed.packages()))) { install.packages("graphics") }
if (! ("RCurl" %in% rownames(installed.packages()))) { install.packages("RCurl") }
if (! ("jsonlite" %in% rownames(installed.packages()))) { install.packages("jsonlite") }
if (! ("tools" %in% rownames(installed.packages()))) { install.packages("tools") }
if (! ("utils" %in% rownames(installed.packages()))) { install.packages("utils") }
install.packages("h2o", type="source", repos=(c("http://h2o-release.s3.amazonaws.com/h2o/rel-ueno/1/R")))
library(h2o)
localH2O = h2o.init(nthreads=-1)
install.packages("h2o", type="source", repos=(c("http://h2o-release.s3.amazonaws.com/h2o/rel-ueno/1/R")))
library(h2o)
localH2O = h2o.init(nthreads=-1)
install.packages("h2o", type="source", repos=(c("http://h2o-release.s3.amazonaws.com/h2o/rel-ueno/1/R")))
library(h2o)
localH2O = h2o.init(nthreads=-1)
library(h2o)
h2o.init(nthreads=-1)
library(h2o)
h2o.init(nthread=-1)
remove.packages("h2o")
install.packages("h2o", type="source", repos=(c("http://h2o-release.s3.amazonaws.com/h2o/rel-ueno/1/R")))
install.packages("h2o", type = "source", repos = (c("http://h2o-release.s3.amazonaws.com/h2o/rel-ueno/1/R")))
install.packages("RCurl")
install.packages("h2o", type="source", repos=(c("http://h2o-release.s3.amazonaws.com/h2o/rel-ueno/1/R")))
install.packages("h2o", type = "source", repos = (c("http://h2o-release.s3.amazonaws.com/h2o/rel-ueno/1/R")))
install.packages("h2o", type = "source", repos = (c("http://h2o-release.s3.amazonaws.com/h2o/rel-ueno/1/R")))
install.packages("h2o", type = "source", repos = (c("http://h2o-release.s3.amazonaws.com/h2o/rel-ueno/1/R")))
library(h2o)
h2o.init()
install.packages("portfo")
install.packages("stockPortfolio")
install.packages("PortfolioAnalytics")
install.packages("quadprog")
q()
install.packages("fportfolio")
install.packages("fPortfolio")
library(fPortfolio)
class(SWE.RET)
class(SWx.RET)
class(SWX.RET)
colnames(SWX.RET)
head(SWX.RET[,1:3])
typeof(SWX.RET)
head(SWX)
end(SWX)
class(SWX)
nrow(SWX)
charvec <- timeCalendar()
charvec
install.packages("sos")
RSiteSearch("Portfolio")
install.packages("ctv")
library(ctv)
install.views("Finance")
library(fPortfolio)
library(fImport)
knitr::opts_chunk$set(echo = TRUE)
data(AirPassengers)
class(AirPassengers)
knitr::opts_chunk$set(echo = TRUE)
data(AirPassengers)
class(AirPassengers)
knitr::opts_chunk$set(echo = TRUE)
data(AirPassengers)
class(AirPassengers)
#This tells you that the data series is in a time series format
start(AirPassengers)
#This is the start of the time series
end(AirPassengers)
plot(AirPassengers)
abline(reg=lm(AirPassengers~time(AirPassengers)))
cycle(AirPassengers)
#This will print the cycle across years.
plot(aggregate(AirPassengers,FUN=mean))
#This will aggregate the cycles and display a year on year trend
boxplot(AirPassengers~cycle(AirPassengers))
#Box plot across months will give us a sense on seasonal effect
adf.test(diff(log(AirPassengers)), alternative="stationary", k=0)
# Inject outliers into data.
cars1 <- cars[1:30, ]  # original data
cars_outliers <- data.frame(speed=c(19,19,20,20,20), dist=c(190, 186, 210, 220, 218))  # introduce outliers.
cars2 <- rbind(cars1, cars_outliers)  # data with outliers.
# Plot of data with outliers.
par(mfrow=c(1, 2))
plot(cars2$speed, cars2$dist, xlim=c(0, 28), ylim=c(0, 230), main="With Outliers", xlab="speed", ylab="dist", pch="*", col="red", cex=2)
abline(lm(dist ~ speed, data=cars2), col="blue", lwd=3, lty=2)
# Plot of original data without outliers. Note the change in slope (angle) of best fit line.
plot(cars1$speed, cars1$dist, xlim=c(0, 28), ylim=c(0, 230), main="Outliers removed \n A much better fit!", xlab="speed", ylab="dist", pch="*", col="red", cex=2)
abline(lm(dist ~ speed, data=cars1), col="blue", lwd=3, lty=2)
install.packages("revealjs")
install.packages("factextra")
install.packages("factoextra")
install.packages("dbscan")
help(optics)
help(dbscan::kNNdistplot)
help(kNNdistplot)
install.packages("UsingR
")
;
install.packages("UsingR")
install_github('slidify', 'ramnathv')
install.packages("devtools")
install_github('slidify', 'ramnathv')
library(devtools)
install_github('slidify', 'ramnathv')
install.packages("slidify")
install_github('ramnathv/slidify')
install.packages("rCharts")
library(devtools)
install_github('ramnathv/rCharts')
library(devtools)
install_github('ramnathv/rCharts')
setwd("~/Presentation/dataAnalysis_open")
library(slidify)
slidify("dataanalysisopen.rmd")
slidify("dataanalysisopen.rmd")
library(datasets)
kable(head(attitude), format = "markdown")
titan <- read.csv("../Titanic.csv",header=TRUE)
library('knitr')
kable(head(titan), format = "markdown")
library(datasets)
kable(head(attitude), format = "markdown")
slidify("dataanalysisopen.rmd")
slidify("dataanalysisopen.rmd")
library(UsingR)
data(galton)
ggplot(galton,aes(parent,child)) +
geom_point(color='darkblue')
slidify("dataanalysisopen.rmd")
